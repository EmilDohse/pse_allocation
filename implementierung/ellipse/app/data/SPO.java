// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package data;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Entity;
import javax.persistence.OneToMany;
import javax.validation.constraints.NotNull;

/************************************************************/
/**
 * Diese Klasse stellt eine Studienprüfungsordnung dar.
 */
@Entity
public class SPO extends ElipseModel {

    /**
     * Der Name der Prüfungsordnung.
     */
    @NotNull
    private String            name;
    /**
     * Die nach dieser Prüfungsordnung benötigten Teilleistungen für die
     * Teilnahme am PSE.
     */
    @OneToMany
    private List<Achievement> necessaryAchievements;
    /**
     * Die zusätzlichen Teilleistungen.
     */
    @OneToMany
    private List<Achievement> additionalAchievements;

    /**
     * Fügt eine zusätzliche Teilleistung hinzu.
     * 
     * @param achievement
     *            Teilleistung, die hinzugefügt wird.
     */
    public void addAdditionalAchievement(Achievement achievement) {
        if (additionalAchievements == null) {
            additionalAchievements = new ArrayList<Achievement>();
        }

        additionalAchievements.add(achievement);
    }

    /**
     * Entfernt eine zusätzliche Teilleistung.
     * 
     * @param achievement
     *            Teilleistung, die entfernt wird.
     */
    public void removeAdditionalAchievement(Achievement achievement) {
        if (additionalAchievements.contains(achievement)) {
            additionalAchievements.remove(additionalAchievements);
        } else {
            // TODO throws
        }
    }

    /**
     * Fügt eine benötigte Teilleistung hinzu.
     * 
     * @param achievement
     *            Teilleistung, die hinzugefügt wird.
     */
    public void addNecessaryAchievement(Achievement achievement) {
        if (necessaryAchievements == null) {
            necessaryAchievements = new ArrayList<Achievement>();
        }

        necessaryAchievements.add(achievement);
    }

    /**
     * Entfernt eine benötigte Teilleistung.
     * 
     * @param achievement
     *            Teilleistung, die entfernt wird.
     */
    public void removeNecessaryAchievement(Achievement achievement) {
        if (necessaryAchievements.contains(achievement)) {
            necessaryAchievements.remove(achievement);
        } else {
            // TODO throws
        }
    }

    /**
     * Getter-Methode für den Namen.
     * 
     * @return Der Name der SPO.
     */
    public String getName() {
        return name;
    }

    /**
     * Getter-Methode für die benötigten Teilleistungen.
     * 
     * @return Die benötigten Teilleistungen.
     */
    public List<Achievement> getNecessaryAchievements() {
        return necessaryAchievements;
    }

    /**
     * Getter-Methode für die zusätzlichen Teilleistungen.
     * 
     * @return Die zusätzlichen Teilleistungen.
     */
    public List<Achievement> getAdditionalAchievements() {
        return additionalAchievements;
    }

    /**
     * Setter-Methode für den Name.
     * 
     * @param name
     *            Der Name der SPO.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Setter-Methode für die benötigten Teilleistungen.
     * 
     * @param neccessaryAchievemens
     *            Die benötigten Teilleistungen.
     */
    public void setNecessaryAchievements(List<Achievement> necessaryAchievements) {
        this.necessaryAchievements = necessaryAchievements;
    }

    /**
     * Setter-Methode für die zusätzlichen Teilleistungen.
     * 
     * @param additionalAchievements
     *            Die zusätzlichen Teilleistungen.
     */
    public void setAdditionalAchievements(List<Achievement> additionalAchievements) {
        this.additionalAchievements = additionalAchievements;
    }

    /**
     * Diese Methode gibt alle SPOs zurück.
     * 
     * @return Alle SPOs.
     */
    public static List<SPO> getSPOs() {
        return ElipseModel.getAll(SPO.class);
    }

    /**
     * Dies Methode gibt eine bestimmte SPO zurück, die über ihren Namen
     * identifiziert wird.
     * 
     * @param name
     *            Der Name der SPO.
     * @return Die SPO. Null falls keine SPO den übergebenen Namen hat.
     */
    public static SPO getSPO(String name) {
        return getSPOs().stream().filter(spo -> spo.getName().equals(name)).findFirst().orElse(null);
    }

}
