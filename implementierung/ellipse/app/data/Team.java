// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package data;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;

import exception.DataException;

/************************************************************/
/**
 * Diese KLasse stellt ein Team eines Projektes dar.
 */
@Entity
public class Team extends ElipseModel /* implements Comparable<Team> */ {

    /**
     * Nummer des Teams
     */
    // TODO @GeneratedValue
    private int           teamNumber;
    /**
     * Das Projekt des Teams
     */
    @ManyToOne(cascade = CascadeType.PERSIST)
    private Project       project;

    // Ebean braucht das hier
    @ManyToOne
    private Allocation    allocation;

    /**
     * Liste der Studierenden in diesem Teams.
     */
    @ManyToMany(cascade = CascadeType.PERSIST)
    private List<Student> members;

    public Team() {
        super();
        members = new ArrayList<Student>();
    }

    public Team(Project project, List<Student> members) {
        this();
        this.project = project;
        this.members = members;
    }

    /**
     * Getter für die Einteilung, zu der das Team gehört.
     * 
     * @return Die Einteilung.
     */
    public Allocation getAllocation() {
        return allocation;
    }

    /**
     * Setter für die Allocation, zu der das Team gehört.
     * 
     * @param allocation
     *            Die Einteilung.
     * @throws DataException
     *             Wird vom Controller behandelt.
     */
    public void setAllocation(Allocation allocation) throws DataException {
        if (allocation == null) {
            throw new DataException(IS_NULL_ERROR);
        }
        this.allocation = allocation;
    }

    /**
     * Getter für die Teamnummer.
     * 
     * @return Die Teamnummer.
     */
    public int getTeamNumber() {
        return teamNumber;
    }

    /**
     * Setter für die Teamnummer.
     * 
     * @param teamNumber
     *            Die Teamnummer.
     * @throws DataException
     *             Wird vom Controller behandelt.
     */
    public void setTeamNumber(int teamNumber) throws DataException {
        if (teamNumber > project.getNumberOfTeams() || teamNumber < 1) {
            throw new DataException("team.invalidTeamNumber");
        }
        this.teamNumber = teamNumber;
    }

    /**
     * Setter für die Mitglieder des Teams.
     * 
     * @param members
     *            Die Mitglieder des Teams.
     * @throws DataException
     *             Wird vom Controller behandelt.
     */
    public void setMembers(List<Student> members) throws DataException {
        if (members == null) {
            throw new DataException(IS_NULL_ERROR);
        }
        if (members.isEmpty()) {
            this.members = members;
            return;
        }
        if (members.size() > project.getMaxTeamSize() || members.size() < project.getMinTeamSize()) {
            throw new DataException("team.invalidTeamSize");
        }
        this.members = members;
    }

    /**
     * Fügt einen Studierenden zum Team hinzu.
     * 
     * @param member
     *            Der Studierende, der dem Team hinzugefügt wird.
     * @throws DataException
     *             Wird vom Controller behandelt.
     */
    public void addMember(Student member) throws DataException {
        if (member == null) {
            throw new DataException(IS_NULL_ERROR);
        }
        // Hier wird nicht auf die maximale Größe geprüft, da der Admin diese
        // Grenze überschreiten kann
        members.add(member);
    }

    /**
     * Entfernt einen Studierenden aus dem Team.
     * 
     * @param member
     *            Der Studierende, der aus dem Team entfernt wird.
     */
    public void removeMember(Student member) {
        members.remove(member);
    }

    /**
     * Getter für das Projekt.
     * 
     * @return Das Projekt.
     */
    public Project getProject() {
        return project;
    }

    /**
     * Setter für das Projekt.
     * 
     * @param project
     *            Das Projekt.
     * @throws DataException
     *             Wird vom Controller behandelt.
     */
    public void setProject(Project project) throws DataException {
        if (project == null) {
            throw new DataException(IS_NULL_ERROR);
        }
        this.project = project;
    }

    /**
     * Diese Methode gibt die Studierenden (Mitglieder) des Teams zurück.
     * 
     * @return Die Mitglieder des Teams.
     */
    public List<Student> getMembers() {
        return members;
    }

    /**
     * Diese Methode gibt die Betreuer des Teams zurück.
     * 
     * @return Die Betreuer des Teams.
     */
    public List<Adviser> getAdvisers() {
        return project.getAdvisers();
    }

    //
    // @Override
    // public int compareTo(Team o) {
    // return Integer.compare(teamNumber, o.getTeamNumber());
    // }
    // TODO Kann das weg?

    public String toStringForNotification() {
        String toReturn = this.getTeamNumber() + ":\n";
        for (int i = 0; i < this.getMembers().size(); i++) {
            toReturn += members.get(i).toStringForNotification() + "\n";
        }
        return toReturn;
    }

}
