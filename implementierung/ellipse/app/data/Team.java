// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package data;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;

/************************************************************/
/**
 * Diese KLasse stellt ein Team eines Projektes dar.
 */
@Entity
public class Team extends ElipseModel implements Comparable<Team> {

    /**
     * Nummer des Teams
     */
    // TODO @GeneratedValue
    private int           teamNumber;
    /**
     * Das Projekt des Teams
     */
    @ManyToOne(cascade = CascadeType.PERSIST)
    private Project       project;

    // Ebean braucht das hier
    @ManyToOne
    private Allocation    allocation;

    /**
     * Liste der Studierenden in diesem Teams.
     */
    @ManyToMany(cascade = CascadeType.PERSIST)
    private List<Student> members;

    public Team() {
        members = new ArrayList<Student>();
    }

    public Team(Project project, List<Student> members) {
        this.project = project;
        this.members = members;
    }

    public Allocation getAllocation() {
        return allocation;
    }

    public void setAllocation(Allocation allocation) {
        this.allocation = allocation;
    }

    /**
     * Getter für die Teamnummer
     * 
     * @return Teamnummer
     */
    public int getTeamNumber() {
        return teamNumber;
    }

    /**
     * Setter für die Teamnummer
     * 
     * @param teamNumber
     *            Teamnummer
     */
    public void setTeamNumber(int teamNumber) {
        this.teamNumber = teamNumber;
    }

    /**
     * Setter für die Mitglieder des Teams.
     * 
     * @param members
     *            Die Mitglieder des Teams.
     */
    public void setMembers(List<Student> members) {
        this.members = members;
    }

    /**
     * Fügt einen Studierenden zum Team hinzu.
     * 
     * @param member
     *            Der Studierende, der dem Team hinzugefügt wird.
     */
    public void addMember(Student member) {
        if (members == null) {
            members = new ArrayList<Student>();
        }

        members.add(member);
    }

    /**
     * Entfernt einen Studierenden aus dem Team.
     * 
     * @param member
     *            Der Studierende, der aus dem Team entfernt wird.
     */
    public void removeMember(Student member) {
        if (members == null) {
            members = new ArrayList<Student>();
        }

        if (members.contains(member)) {
            members.remove(member);
        } else {
            // TODO throws
        }
    }

    /**
     * Getter für das Projekt.
     * 
     * @return Das Projekt.
     */
    public Project getProject() {
        return project;
    }

    /**
     * Setter für das Projekt.
     * 
     * @param project
     *            Das Projekt.
     */
    public void setProject(Project project) {
        this.project = project;
    }

    /**
     * Diese Methode gibt die Studierenden (Mitglieder) des Teams zurück.
     * 
     * @return Die Mitglieder des Teams.
     */
    public List<Student> getMembers() {
        return members;
    }

    // /**
    // * Diese Methode gibt die Bewertung eines Studierenden zum Projekt dieses
    // * Teams zurück.
    // *
    // * @param student
    // * Der Studierende, dessen Bewertung zurückgegeben werden soll.
    // * @return Die Bewertung des Studierenden.
    // */
    // public int getRating(Student student) {
    // return student.getRating(project);
    // }

    /**
     * Diese Methode gibt die Betreuer des Teams zurück.
     * 
     * @return Die Betreuer des Teams.
     */
    public List<Adviser> getAdvisers() {
        return project.getAdvisers();
    }

    /**
     * getter für die id
     */
    @Override
    public int getId() {
        // TODO iplementiern wird gebraucht
        return 0;
    }

    @Override
    public int compareTo(Team o) {
        return Integer.compare(teamNumber, o.getTeamNumber());
    }

}
