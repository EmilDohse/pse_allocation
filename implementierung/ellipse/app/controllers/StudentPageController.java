// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package controllers;

import java.util.ArrayList;
import java.util.List;

import com.google.inject.Inject;

import data.Achievement;
import data.ElipseModel;
import data.GeneralData;
import data.LearningGroup;
import data.Project;
import data.Rating;
import data.SPO;
import data.Semester;
import data.Student;
import data.User;
import play.data.DynamicForm;
import play.data.FormFactory;
import play.mvc.Controller;
import play.mvc.Result;
import security.BlowfishPasswordEncoder;
import security.UserManagement;
import views.Menu;
import views.StudentMenu;

/************************************************************/
/**
 * Dieser Controller ist zuständig für alle Http-Requests, welche im
 * Studentenbereich aufkommen. Dazu zählen das Senden einer neuen HTML-Seite bei
 * einem Klick auf einen Link, als auch das Reagieren auf Benutzereingaben, wie
 * das Abschicken eines Formulars.
 */
public class StudentPageController extends Controller {

    private static final String INTERNAL_ERROR         = "error.internalError";
    private static final String GEN_ERROR              = "index.registration.error.genError";
    private static final String ALREADY_IN_OTHER_GROUP = "student.learningGroup.error.alreadyInOtherGroup";

    @Inject
    FormFactory                 formFactory;

    /**
     * Diese Seite stellt das Formular dar, das ein Student ausfüllen muss, wenn
     * er zwar einen Account hat, aber nicht im aktuellen PSE-Semester ist. Hier
     * darf er dann seine Studierendendaten aktualisieren.
     * 
     * @param error
     *            Fehlermeldung, die angezeigt werden soll
     * @return Die Seite, die angezeigt wird.
     */
    public Result changeFormPage() {
        play.twirl.api.Html content = views.html.studentChangeData.render(
                GeneralData.loadInstance().getCurrentSemester().getSpos());
        Menu menu = new Menu();
        return ok(views.html.student.render(menu, content));
    }

    /**
     * Hier wird das Formular aus {@code changeFormPage} ausgewertet und er wird
     * wenn alles korrekt ist in das Studentenportal weitergeleitet wird.
     * 
     * @return die Seite, die angezeigt wird.
     */
    public Result changeData() {
        DynamicForm form = formFactory.form().bindFromRequest();
        if (form.data().isEmpty()) {
            return badRequest(ctx().messages().at(INTERNAL_ERROR));
        } else {
            // die felder werden ausgelesen
            String semesterString = form.get("semester");
            String spoIdString = form.get("spo");
            int spoId;
            int semester;
            try {
                semester = Integer.parseInt(semesterString);
                spoId = Integer.parseInt(spoIdString);
                SPO spo = ElipseModel.getById(SPO.class, spoId);
                boolean trueData = false;

                if (form.get("trueData") != null) {
                    // wenn der student angekreuzt hat das seine Angaben der
                    // Wahrheit entsprechen
                    trueData = true;
                }
                List<Achievement> completedAchievements;
                List<Achievement> nonCompletedAchievements;
                try {
                    completedAchievements = MultiselectList
                            .createAchievementList(form, "completed-"
                                    + spoIdString + "-multiselect");
                } catch (NumberFormatException e) {
                    flash("error", ctx().messages().at(INTERNAL_ERROR));
                    return redirect(controllers.routes.StudentPageController
                            .changeFormPage());
                }
                try {
                    nonCompletedAchievements = MultiselectList
                            .createAchievementList(form,
                                    "due-" + spoIdString + "-multiselect");
                } catch (NumberFormatException e) {
                    flash("error", ctx().messages().at(INTERNAL_ERROR));
                    return redirect(controllers.routes.StudentPageController
                            .changeFormPage());
                }
                if (trueData) {
                    UserManagement management = new UserManagement();
                    Student student = (Student) management
                            .getUserProfile(ctx());
                    student.doTransaction(() -> {
                        student.setSPO(spo);
                        student.setSemester(semester);
                        student.setCompletedAchievements(completedAchievements);
                        student.setOralTestAchievements(
                                nonCompletedAchievements);
                    });
                    Semester currentSemester = GeneralData.loadInstance()
                            .getCurrentSemester();
                    currentSemester.doTransaction(() -> {
                        currentSemester.addStudent(student);
                    });
                    management.addStudentRoleToOldStudent(ctx());
                    return redirect(controllers.routes.StudentPageController
                            .learningGroupPage());
                }
                flash("error", ctx().messages().at(GEN_ERROR));
                return redirect(controllers.routes.StudentPageController
                        .changeFormPage());

            } catch (NumberFormatException e) {
                flash("error", ctx().messages().at(GEN_ERROR));
                return redirect(controllers.routes.StudentPageController
                        .changeFormPage());
            }
        }

    }

    /**
     * Diese Methode gibt die Seite zurück, auf der der Student sieht in welcher
     * Lerngruppe er ist, oder wenn er in keiner aktuell ist, eine erstellen
     * oder einer beitreten kann.
     * 
     * @return Die Seite, die als Antwort verschickt wird.
     */
    public Result learningGroupPage() {
        UserManagement user = new UserManagement();
        User userProfile = user.getUserProfile(ctx());
        assert userProfile instanceof Student;
        Student student = (Student) userProfile;
        play.twirl.api.Html content = views.html.studentLearningGroup
                .render(GeneralData.loadInstance().getCurrentSemester()
                        .getLearningGroupOf(student));
        Menu menu = new StudentMenu(ctx(), ctx().request().path());
        return ok(views.html.student.render(menu, content));
    }

    /**
     * Diese Methode gibt die Seite zurück, auf der der Student seine
     * Bewertungen abgeben kann.
     * 
     * @return Die Seite, die als Antwort verschickt wird.
     */
    public Result ratingPage() {
        Student student = (Student) new UserManagement().getUserProfile(ctx());
        play.twirl.api.Html content = views.html.studentRating.render(student,
                GeneralData.loadInstance().getCurrentSemester().getProjects());
        Menu menu = new StudentMenu(ctx(), ctx().request().path());
        return ok(views.html.student.render(menu, content));
    }

    /**
     * Diese Methode gibt die Seite zurück, auf der der Student das Ergebnis der
     * Einteilungsberechnung einsehen kann. Er sieht also sein Projekt und seine
     * Teammitglieder.
     * 
     * @return Die Seite, die als Antwort verschickt wird.
     */
    public Result resultsPage() {
        if (GeneralData.loadInstance().getCurrentSemester()
                .getFinalAllocation() == null) {
            play.twirl.api.Html content = views.html.noAllocationYet.render();
            Menu menu = new StudentMenu(ctx(), ctx().request().path());
            return ok(views.html.student.render(menu, content));

        }
        UserManagement user = new UserManagement();
        User userProfile = user.getUserProfile(ctx());
        assert userProfile instanceof Student;
        Student student = (Student) userProfile;
        play.twirl.api.Html content = views.html.studentResult
                .render(GeneralData.loadInstance().getCurrentSemester()
                        .getFinalAllocation().getTeam(student));
        Menu menu = new StudentMenu(ctx(), ctx().request().path());
        return ok(views.html.student.render(menu, content));
    }

    /**
     * Diese Methode fügt die Daten der Bewertungen eines Studenten in das
     * System ein und leitet den Studenten wieder zurück auf die
     * Bewertungsseite, wo er nun seine eingegebene Bewertungen sehen kann.
     * 
     * @return Die Seite, die als Antwort verschickt wird.
     */
    public Result rate() {
        UserManagement user = new UserManagement();
        User userProfile = user.getUserProfile(ctx());
        assert userProfile instanceof Student;
        Student student = (Student) userProfile;
        DynamicForm form = formFactory.form().bindFromRequest();
        if (form.data().isEmpty()) {
            return badRequest(ctx().messages().at(INTERNAL_ERROR));
        }
        LearningGroup lg = GeneralData.loadInstance().getCurrentSemester()
                .getLearningGroupOf(student);
        lg.doTransaction(() -> {
            for (Project project : GeneralData.loadInstance()
                    .getCurrentSemester().getProjects()) {
                lg.rate(project, Integer
                        .parseInt(form.get(Integer.toString(project.getId()))));
                // holt sich das rating des studenten aus dem formular
            }
        });
        return redirect(
                controllers.routes.StudentPageController.learningGroupPage());
    }

    /**
     * Diese Methode wird aufgerufen, wenn der Student einer Lerngruppe
     * beitreten oder eine erstellen will.
     * 
     * @return Die Seite, die als Antwort verschickt wird
     */
    public Result setLearningGroup() {
        DynamicForm form = formFactory.form().bindFromRequest();
        if (form.get("create") != null) {
            return createLearningGroup();
        } else if (form.get("join") != null) {
            return joinLearningGroup();
        } else {
            flash("error", ctx().messages().at(INTERNAL_ERROR));
            return redirect(controllers.routes.StudentPageController
                    .learningGroupPage());
        }
    }

    /**
     * Diese Methode erstellt eine neue Lerngruppe im System und fügt den
     * Ersteller der Lerngruppe als erstes Mitglied in diese ein. Der Student
     * wird anschließend auf die Lerngruppen-Seite zurückgeleitet.
     * 
     * @return Die Seite, die als Antwort verschickt wird.
     */
    public Result createLearningGroup() {
        UserManagement user = new UserManagement();
        User userProfile = user.getUserProfile(ctx());
        assert userProfile instanceof Student;
        Student student = (Student) userProfile;
        Semester semester = GeneralData.loadInstance().getCurrentSemester();
        if (!semester.getLearningGroupOf(student).isPrivate()) {
            flash("error", ctx().messages().at(ALREADY_IN_OTHER_GROUP));
            return redirect(controllers.routes.StudentPageController
                    .learningGroupPage());
        }
        DynamicForm form = formFactory.form().bindFromRequest();
        if (form.data().isEmpty()) {
            return badRequest(ctx().messages().at(INTERNAL_ERROR));
        }
        String name = form.get("learningGroupname");
        if (name.matches("\\d*")) {
            // Wenn Name leer ist oder nur aus Ziffern besteht
            flash("error", ctx().messages()
                    .at("student.learningGroup.error.nameFormat"));
            return redirect(controllers.routes.StudentPageController
                    .learningGroupPage());
        }
        String password = form.get("learningGroupPassword");
        // TODO stimmt hier der rückgabewert in html
        LearningGroup learningGroup = LearningGroup.getLearningGroup(name,
                semester);
        if (learningGroup != null) {
            flash("error", ctx().messages()
                    .at("student.learningGroup.error.existsAlready"));
            return redirect(controllers.routes.StudentPageController
                    .learningGroupPage());
        }
        LearningGroup oldLg = semester.getLearningGroupOf(student);
        LearningGroup lg = new LearningGroup(name, password);
        lg.save();
        lg.doTransaction(() -> {
            lg.addMember(student);
            lg.setPrivate(false);
            // Ratings kopieren
            for (Rating r : oldLg.getRatings()) {
                lg.rate(r.getProject(), r.getRating());
            }
        });
        // Lösche die private Lerngruppe
        oldLg.delete();
        semester.refresh();
        semester.doTransaction(() -> {
            // TODO falls man die alten bewertungen wieder will muss man hier
            // die alte lerngruppe behalten
            semester.addLearningGroup(lg);
        });
        return redirect(
                controllers.routes.StudentPageController.learningGroupPage());
    }

    /**
     * Diese Methode entfernt den Student aus der aktuellen Lerngruppe.
     * Anschließend wird der Student auf die Lerngruppen-Seite zurück geleitet.
     * 
     * @return Die Seite, die als Antwort verschickt wird.
     */
    public Result leaveLearningGroup() {
        // TODO wirft manchmal PersistenceException
        // Student hat dann keine Lerngruppe mehr
        UserManagement user = new UserManagement();
        User userProfile = user.getUserProfile(ctx());
        assert userProfile instanceof Student;
        Student student = (Student) userProfile;
        LearningGroup lg = GeneralData.loadInstance().getCurrentSemester()
                .getLearningGroupOf(student);
        if (lg.isPrivate()) {
            flash("error", ctx().messages()
                    .at("student.learningGroup.error.noLearningGroup"));
            return redirect(controllers.routes.StudentPageController
                    .learningGroupPage());
        }

        lg.doTransaction(() -> {
            lg.removeMember(student);
        });
        // Hier wird der student wieder in seine private Lerngruppe
        // eingefügt
        LearningGroup lgNew = new LearningGroup(student.getUserName(), "");
        lgNew.save();
        lgNew.doTransaction(() -> {
            lgNew.addMember(student);
            lgNew.setPrivate(true);
            // Ratings kopieren
            for (Rating r : lg.getRatings()) {
                lgNew.rate(r.getProject(), r.getRating());
            }
        });
        lg.refresh();
        if (lg.getMembers().size() == 0) {
            // Leeres Team löschen
            lg.delete();
        }
        Semester semester = GeneralData.loadInstance().getCurrentSemester();
        semester.doTransaction(() -> {
            semester.addLearningGroup(lgNew);
        });
        return redirect(
                controllers.routes.StudentPageController.learningGroupPage());

    }

    /**
     * Diese Methode fügt den Studenten zu einer Lerngruppe hinzu, falls eine
     * Lerngruppe mit dem Namen und dem zugehörigen Passwort existiert und die
     * Lerngruppe noch nicht größergleich der maximalen Lerngruppenqröße ist .
     * Anschließend wird der Student auf die Lerngruppen-Seite zurückgeleitet.
     * 
     * @return Die Seite, die als Antwort verschickt wird.
     */
    public Result joinLearningGroup() {
        UserManagement user = new UserManagement();
        User userProfile = user.getUserProfile(ctx());
        assert userProfile instanceof Student;
        Student student = (Student) userProfile;
        DynamicForm form = formFactory.form().bindFromRequest();
        if (form.data().isEmpty()) {
            return badRequest(ctx().messages().at(INTERNAL_ERROR));
        }
        String name = form.get("learningGroupname");
        String pw = form.get("learningGroupPassword");
        LearningGroup lgOld = GeneralData.loadInstance().getCurrentSemester()
                .getLearningGroupOf(student);
        LearningGroup lgNew = LearningGroup.getLearningGroup(name,
                GeneralData.loadInstance().getCurrentSemester());
        // Wenn die Lerngruppe bereits voll ist, wird ein Fehler zurückgegeben
        if (lgNew.getMembers().size() >= GeneralData.loadInstance()
                .getCurrentSemester().getMaxGroupSize()) {
            flash("error", ctx().messages()
                    .at("student.learningGroup.error.learningGroupFull"));
            return redirect(controllers.routes.StudentPageController
                    .learningGroupPage());
        }
        if (!lgOld.isPrivate()) {
            flash("error", ctx().messages().at(ALREADY_IN_OTHER_GROUP));
            return redirect(controllers.routes.StudentPageController
                    .learningGroupPage());
        }
        if (lgNew.isPrivate()) {
            flash("error", ctx().messages()
                    .at("student.learningGroup.error.joinProhibited"));
            return redirect(controllers.routes.StudentPageController
                    .learningGroupPage());
        }

        if (lgNew.getPassword().equals(pw)) {
            lgOld.delete(); // die private lerngruppe wird gelöscht
            lgNew.doTransaction(() -> {
                lgNew.addMember(student);
            });
            return redirect(controllers.routes.StudentPageController
                    .learningGroupPage());
        } else {
            flash("error",
                    ctx().messages().at("student.learningGroup.error.wrongPW"));
            return redirect(controllers.routes.StudentPageController
                    .learningGroupPage());
        }
    }

    /**
     * Diese Methode gibt die Seite zurück, auf der der Student seine
     * Studentendaten wie E-Mail-Adresse und Passwort ändern kann.
     * 
     * @return Die Seite, die als Antwort verschickt wird.
     */
    public Result accountPage() {
        UserManagement user = new UserManagement();
        User userProfile = user.getUserProfile(ctx());
        assert userProfile instanceof Student;
        Student student = (Student) userProfile;
        play.twirl.api.Html content = views.html.studentAccount.render(student);
        Menu menu = new StudentMenu(ctx(), ctx().request().path());
        return ok(views.html.student.render(menu, content));
    }

    /**
     * Diese Methode editiert die Daten des Studenten, welche er auf der
     * Account-Seite geändert hat.
     * 
     * @return Die Seite, die als Antwort verschickt wird.
     */
    public Result editAccount() {
        UserManagement user = new UserManagement();
        User userProfile = user.getUserProfile(ctx());
        assert userProfile instanceof Student;
        Student student = (Student) userProfile;
        DynamicForm form = formFactory.form().bindFromRequest();
        if (form.data().isEmpty()) {
            return badRequest(ctx().messages().at(INTERNAL_ERROR));
        }
        if (form.get("passwordChange") != null) {
            String oldpw = form.get("oldPassword");
            String pw = form.get("newPassword");
            String pwrepeat = form.get("newPasswordRepeat");

            boolean matches = new BlowfishPasswordEncoder().matches(oldpw,
                    student.getPassword());

            if (!matches) {
                flash("error", ctx().messages()
                        .at("student.account.error.pwsDontMatch"));
                return redirect(
                        controllers.routes.StudentPageController.accountPage());
            }
            if (!pw.equals(pwrepeat)) {
                flash("error",
                        ctx().messages().at("student.account.error.wrongPW"));
                return redirect(
                        controllers.routes.StudentPageController.accountPage());
            }
            String pwEnc = new BlowfishPasswordEncoder().encode(pw);
            student.doTransaction(() -> {
                student.setPassword(pwEnc);
            });
        }
        if (form.get("emailChange") != null) {
            String email = form.get("newEmail");
            student.doTransaction(() -> {
                student.setEmailAddress(email);
            });
            // TODO hier verifikation
        }
        return redirect(controllers.routes.StudentPageController.accountPage());
    }

    /**
     * Diese Methode verschickt einen neuen Verifikations-Code an die aktuelle
     * E-Mail-Adresse.
     * 
     * @return Die Seite, die als Antwort verschickt wird.
     */
    public Result sendNewVerificationLink() {
        // TODO: Verifkationscode neu erstellen und senden
        return redirect(controllers.routes.StudentPageController.accountPage());
    }
}
