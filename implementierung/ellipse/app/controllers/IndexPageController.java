// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package controllers;

import java.util.ArrayList;

import com.google.inject.Inject;

import data.Achievement;
import data.ElipseModel;
import data.GeneralData;
import data.SPO;
import data.Student;
import notificationSystem.Notifier;
import play.data.DynamicForm;
import play.data.FormFactory;
import play.mvc.Controller;
import play.mvc.Result;
import views.IndexMenu;
import views.Menu;

/************************************************************/
/**
 * Dieser Controller ist zuständig für alle Http-Requests, die in dem Bereich
 * aufkommen, welche ohne Anmeldung zugänglich sind. Dazu zählt neben der
 * Index-Seite auch die Passwort vergessen-Seite und die
 * E-Mail-Verifikations-Seite.
 */
public class IndexPageController extends Controller {

    /**
     * 
     */
    private Notifier notifier;

    @Inject
    FormFactory      formFactory;

    /**
     * Diese Methode gibt die Startseite zurück. Auf dieser Seite können sich
     * Administrator, Betreuer und Studenten anmelden oder aktuelle
     * Informationen einsehen.
     * 
     * @return Die Seite, die als Antwort verschickt wird.
     */
    public Result indexPage(String error) {
        play.twirl.api.Html content = views.html.indexInformation.render(
                GeneralData.getInstance().getCurrentSemester().getInfoText(),
                error);
        Menu menu = new IndexMenu(ctx(), ctx().request().path());
        return ok(views.html.index.render(menu, content));
    }

    /**
     * Diese Methode gibt die Seite zurück, auf der sich ein Student
     * registrieren kann.
     * 
     * @return Die Seite, die als Antwort verschickt wird.
     */
    public Result registerPage(String error) {
        play.twirl.api.Html content = views.html.indexRegistration.render(
                GeneralData.getInstance().getCurrentSemester().getSpos(),
                error);
        Menu menu = new IndexMenu(ctx(), ctx().request().path());
        return ok(views.html.index.render(menu, content));
    }

    /**
     * Diese Methode registriert einen Studenten und fügt diesen in die
     * Datenbank ein, sofern alle notwendigen Teillestungen als bestanden
     * angegeben wurden.
     * 
     * @return Die Seite, die als Antwort verschickt wird.
     */
    public Result register() {

        DynamicForm form = formFactory.form().bindFromRequest();
        if (form.data().size() == 0) {
            return badRequest("Expceting some data");
        } else {
            // die felder werden ausgelesen
            String firstName = form.get("firstName");
            String lastName = form.get("lastName");
            String email = form.get("email");
            String password = form.get("pw");
            String pwRepeat = form.get("rpw");
            String matNrString = "";
            String semesterString = form.get("semester");
            String spoIdString = form.get("spo");
            int spoId;
            int semester = -1;
            int matNr = -1;
            try {
                // die matrikelnummer wird geparst
                matNrString = form.get("matrnr");
                matNr = Integer.parseInt(matNrString);
                semester = Integer.parseInt(semesterString);
                spoId = Integer.parseInt(spoIdString);
            } catch (NumberFormatException e) {
                return redirect(controllers.routes.IndexPageController
                        .registerPage(ctx().messages()
                                .at("index.registration.error.genError")));
            }
            SPO spo = ElipseModel.getById(SPO.class, spoId);
            boolean trueData = false;

            if (form.get("trueData") != null) {
                // wenn der student angekreuzt hat das seine angaben der
                // wahrheit entsprechen
                trueData = true;
            }
            ArrayList<Achievement> completedAchievments = new ArrayList<>();
            ArrayList<Achievement> notCompletedAchievments = new ArrayList<>();
            String completedAchievmentIdString = form
                    .get("completed-" + spoIdString + "-multiselect[0]");
            int i = 0;
            int completdeAchievmentId;
            while (completedAchievmentIdString != null) {
                try {
                    completdeAchievmentId = Integer
                            .parseInt(completedAchievmentIdString);
                } catch (NumberFormatException e) {
                    return redirect(controllers.routes.IndexPageController
                            .registerPage(ctx().messages()
                                    .at("index.registration.error.genError")));
                }
                completedAchievments.add(ElipseModel.getById(Achievement.class,
                        completdeAchievmentId));
                i++;
                completedAchievmentIdString = form
                        .get("completed-" + spoIdString + "-multiselect["
                                + Integer.toString(i) + "]");
            }
            String notCompletedAchievmentIdString = form
                    .get("due-" + spoIdString + "-multiselect[0]");
            i = 0;
            int notCompletedachievmentId;
            while (notCompletedAchievmentIdString != null) {
                try {
                    notCompletedachievmentId = Integer
                            .parseInt(notCompletedAchievmentIdString);
                } catch (NumberFormatException e) {
                    return redirect(controllers.routes.IndexPageController
                            .registerPage(ctx().messages()
                                    .at("index.registration.error.genError")));
                }
                notCompletedAchievments.add(ElipseModel
                        .getById(Achievement.class, notCompletedachievmentId));
                i++;
                notCompletedAchievmentIdString = form.get("due-" + spoIdString
                        + "-multiselect[" + Integer.toString(i) + "]");
            }

            if (password.equals(pwRepeat) && trueData) {
                // wenn der student bestätigt hat das seine angaben richtig sind
                // und die passwörter übereinstimmen wird ein neuer student
                // hinzugefügt
                if (Student.getStudent(matNr) == null) {

                    Student student = new Student(matNrString, password, email,
                            firstName, lastName, matNr, spo,
                            completedAchievments, notCompletedAchievments,
                            semester);
                    // TODO get student data from view
                    GeneralData.getInstance().getCurrentSemester()
                            .addStudent(student);
                    return redirect(controllers.routes.IndexPageController
                            .indexPage("error"));
                    // TODO falls nötig noch emial verification einleiten
                } else {
                    // falls bereits ein studnent mit dieser matrikelnumer im
                    // system existiert kann sich der student nicht registrieren
                    return redirect(controllers.routes.IndexPageController
                            .registerPage(ctx().messages().at(
                                    "index.registration.error.matNrExists")));
                }
            }

        } // TODO braucht man hmehr als nur eine gererelle fehlermeldung?
        return redirect(controllers.routes.IndexPageController.registerPage(
                ctx().messages().at("index.registration.error.genError")));
    }

    /**
     * Diese Methode gibt die Seite zurück, die ein Passwort-Rücksetz-Formular
     * für Studenten und Betreuer anzeigt.
     * 
     * @return Die Seite, die als Antwort verschickt wird.
     */
    public Result passwordResetPage(String error) {
        // TODO
        return null;
    }

    /**
     * Diese Methode schickt eine E-Mail anhand der Daten aus dem
     * Passwort-Rücksetz-Formular an den Studenten oder den Betreuer, welche ein
     * neues Passwort enthält.
     * 
     * @return Die Seite, die als Antwort verschickt wird.
     */
    public Result passwordReset() {
        // TODO
        return null;
    }

    /**
     * Diese Methode gibt die Seite zurück, welche einen Studenten verifiziert.
     * Dies funktioniert, indem der Student eine Mail mit einen Link auf diese
     * Seite erhält, welche noch einen Code als Parameter übergibt. Anhand
     * dieses Parameters wird der Student verifiziert.
     * 
     * @return Die Seite, die als Antwort verschickt wird.
     */
    public Result verificationPage(String code) {
        // TODO
        return null;
    }
}
