// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package controllers;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import data.Allocation;
import data.Student;
import data.Team;

/************************************************************/
/**
 * Konkretes Kommando zum verschieben eines Studierenden von seinem aktuellen
 * Team in ein neues.
 */
public class MoveStudentCommand implements EditAllocationCommand {

    private Allocation         allocation;
    private List<Student>      students;
    private Team               newTeam;
    private Map<Student, Team> oldTeams;

    /**
     * Erzeugt ein neues Kommando zum verschieben eines Studierenden.
     * 
     * @param allocation
     *            Einteilung, auf die sich die Änderung bezieht.
     * @param student
     *            Studierender, der verschoben werden soll.
     * @param newTeam
     *            Neues Team, in das der Studierende eingeteilt wird.
     */
    public MoveStudentCommand(Allocation allocation, List<Student> students,
            Team newTeam) {
        super();
        this.allocation = allocation;
        this.students = students;
        this.newTeam = newTeam;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void execute() {

        oldTeams = new HashMap<>();
        for (Student s : students) {
            Team t = allocation.getTeam(s);
            oldTeams.put(s, t);
            // TODO hier eine warnung werfen falls die teamgröße überschritten
            // wird
            if (t != null) {
                t.doTransaction(() -> {
                    t.removeMember(s);
                });
            }
            if (newTeam != null) {
                newTeam.doTransaction(() -> {
                    newTeam.addMember(s);
                });
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void undo() {
        for (Student s : students) {
            // TODO hier eine warnung werfen falls die teamgröße überschritten
            // wird
            if (newTeam != null) {
                newTeam.doTransaction(() -> {
                    newTeam.removeMember(s);
                });
            }
            if (oldTeams.get(s) != null) {
                oldTeams.get(s).doTransaction(() -> {
                    oldTeams.get(s).addMember(s);
                });
            }
        }
    }
}
