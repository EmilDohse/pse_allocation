// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package controllers;

import data.Allocation;
import data.GeneralData;
import data.Student;
import data.Team;
import exception.AllocationEditUndoException;

/************************************************************/
/**
 * Konkretes Kommando zum vertauschen der Teamzugehörigkeit von zwei
 * Studierenden.
 */
public class SwapStudentCommand extends EditAllocationCommand {

    private Allocation allocation;
    private Student    firstStudent;
    private Student    secondStudent;

    /**
     * Erzeugt ein neues Kommando um die Teams von zwei Studenten zu
     * vertauschen.
     * 
     * @param allocation
     *            Einteilung, auf die sich die Änderung bezieht.
     * @param firstStudent
     *            Erster Studierender, der verschoben werden soll.
     * @param secondStudent
     *            Zweiter Studierender, der verschoben werden soll.
     */
    public SwapStudentCommand(Allocation allocation, Student firstStudent,
            Student secondStudent) {
        super();
        this.allocation = allocation;
        this.firstStudent = firstStudent;
        this.secondStudent = secondStudent;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void execute() {
        if (allocation.equals(GeneralData.loadInstance().getCurrentSemester()
                .getFinalAllocation())) {
            return;
        }

        Team firstTeam = allocation.getTeam(firstStudent);
        Team secondTeam = allocation.getTeam(secondStudent);
        if (firstTeam != null) {
            firstTeam.doTransaction(() -> {
                firstTeam.removeMember(firstStudent);
                firstTeam.addMember(secondStudent);
            });
        }
        if (secondTeam != null) {
            secondTeam.doTransaction(() -> {
                secondTeam.addMember(firstStudent);
                secondTeam.removeMember(secondStudent);
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void undo() throws AllocationEditUndoException {
        if (allocation.equals(GeneralData.loadInstance().getCurrentSemester()
                .getFinalAllocation())) {
            throw new AllocationEditUndoException(
                    "Allocation already published");
        }

        Team firstTeam = allocation.getTeam(firstStudent);
        Team secondTeam = allocation.getTeam(secondStudent);
        if (firstTeam != null) {
            firstTeam.doTransaction(() -> {
                firstTeam.removeMember(firstStudent);
                firstTeam.addMember(secondStudent);
            });
        }
        if (secondTeam != null) {
            secondTeam.doTransaction(() -> {
                secondTeam.addMember(firstStudent);
                secondTeam.removeMember(secondStudent);
            });
        }
    }
}
