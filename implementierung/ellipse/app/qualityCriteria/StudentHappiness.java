// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package qualityCriteria;

import java.text.NumberFormat;
import java.util.HashMap;

import data.Allocation;
import data.LearningGroup;
import data.Project;
import data.Semester;
import data.Student;
import data.Team;

/************************************************************/
/**
 * Gütekriterium, das die Studentenhappiness berechnet StudierendenHappiness: ++
 * = 1.0 + = 0.8 0 = 0.6 - = 0.4 — = 0.2 nicht zugeteilt = 0.0 Summe über alle
 * Studenten/Anzahl Studenten.
 */
public class StudentHappiness implements QualityCriterion {

    private static final String DE_NAME = "Studierendenzufriedenheit";
    private static final String EN_NAME = "Student happiness";

    /**
     * Diese Methode berechnet die relative Studentenhappiness.
     * 
     * @return Allgemeine gemittelte Studentenhappiness in Prozent.
     */
    @Override
    public String calculate(Allocation allocation) {
        int sumOfRatings = 0;

        Semester semester = allocation.getSemester();
        HashMap<Student, LearningGroup> studentLG = new HashMap<>();
        for (LearningGroup lg : semester.getLearningGroups()) {
            for (Student student : lg.getMembers()) {
                studentLG.put(student, lg);
            }
        }
        for (Team t : allocation.getTeams()) {
            Project project = t.getProject();
            for (Student student : t.getMembers()) {
                LearningGroup lg = studentLG.get(student);
                double rating = lg.getRating(project);
                sumOfRatings += rating;
            }
        }

        double relativeHappiness = (sumOfRatings / (double) semester.getStudents().size()) / 5.0;

        NumberFormat nf = NumberFormat.getInstance();
        nf.setMaximumFractionDigits(2);
        return nf.format(100 * relativeHappiness) + "%";
    }

    @Override
    public String getName(String local) {
        switch (local) {
        case "de":
            return DE_NAME;
        default:
            return EN_NAME;
        }
    }
}
