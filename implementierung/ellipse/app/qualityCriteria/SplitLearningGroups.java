// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package qualityCriteria;

import java.util.HashMap;

import data.Allocation;
import data.LearningGroup;
import data.Semester;
import data.Student;
import data.Team;

/************************************************************/
/**
 * Gütekriterium, das die Anzahl der zerteilten Lerngruppen berechnet.
 */
public class SplitLearningGroups implements QualityCriterion {

    private static final String DE_NAME = "Anzahl gesplitteter Lerngruppen";
    private static final String EN_NAME = "Number of splitted learning groups";

    /**
     * Die Methode berechnet die Anzahö gesplitteter Lerngruppen.
     * 
     * @return Die Anzahl gesplitteter Lerngruppen als String.
     */
    @Override
    public String calculate(Allocation allocation) {
        int numberOfSplitLearningGroups = 0;
        Semester semester = allocation.getSemester();

        HashMap<Student, Team> studentTeam = new HashMap<>();
        for (Team t : allocation.getTeams()) {
            for (Student student : t.getMembers()) {
                studentTeam.put(student, t);
            }
        }

        // Durchlaufe alle Lerngruppen
        for (LearningGroup lg : semester.getLearningGroups()) {

            // Betrachte nur Lerngruppen mir mehr als einem Mitglied
            if (lg.getMembers().size() > 1) {

                // Suche erstes Team ungleich null
                int i = 0;
                Team firstTeam = null;
                for (i = 0; i < lg.getMembers().size(); i++) {
                    firstTeam = studentTeam.get(lg.getMembers().get(i));
                    if (firstTeam != null) {
                        break;
                    }
                }
                if (i != lg.getMembers().size()) {
                    for (int r = i + 1; r < lg.getMembers().size(); r++) {
                        Team currentTeam = studentTeam
                                .get(lg.getMembers().get(r));
                        if (currentTeam != null
                                && !currentTeam.equals(firstTeam)) {
                            numberOfSplitLearningGroups += 1;
                            break;
                        }
                    }

                }
            }

        }
        return String.valueOf(numberOfSplitLearningGroups);
    }

    @Override
    public String getName(String local) {
        switch (local) {
        case "de":
            return DE_NAME;
        default:
            return EN_NAME;
        }
    }
}
