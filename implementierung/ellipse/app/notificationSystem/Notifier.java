// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package notificationSystem;

import java.util.List;
import java.util.Locale;

import javax.inject.Inject;

import org.apache.commons.mail.Email;
import org.apache.commons.mail.EmailException;
import org.apache.commons.mail.SimpleEmail;

import data.Adviser;
import data.Allocation;
import data.GeneralData;
import data.SMTPOptions;
import data.Student;
import data.Team;
import data.User;
import play.i18n.Lang;
import play.i18n.Messages;
import play.i18n.MessagesApi;

/************************************************************/
/**
 * Klasse die alle Benachrichtigungen der Benutzer (Studenten und Betreuer) per
 * E-Mail übernimmt.
 */
public class Notifier {

    private Messages            messages;

    @Inject
    public Notifier(MessagesApi messagesApi) {
        this.messages = new Messages(new Lang(Locale.GERMAN), messagesApi);
    }

    /**
     * Verschickt an alle Benutzer (Betreuer und Studenten) eine E-Mail mit
     * ihrem zugeteilten Team/Projekt.
     * 
     * @param allocation
     *            veröffentlichte Einteilung
     * @throws EmailException
     */
    public void notifyAllUsers(Allocation allocation) throws EmailException {
        List<Adviser> advisers = GeneralData.loadInstance().getCurrentSemester()
                .getAdvisers();
        List<Student> students = GeneralData.loadInstance().getCurrentSemester()
                .getStudents();
        for (Adviser adviser : advisers) {
            notifyAdviser(allocation, adviser);
        }
        for (Student student : students) {
            notifyStudent(allocation, student);
        }
    }

    /**
     * Verschickt eine E-Mail an einen Studenten und benachrichtigt ihn über die
     * finale Einteilung.
     * 
     * @param allocation
     *            Die finale Einteilung
     * @param student
     *            Der zu benachrichtigende Student
     * @throws EmailException
     */
    public void notifyStudent(Allocation allocation, Student student)
            throws EmailException {
        String bodyText = messages.at("email.notifyResultsStudent",
                student.getName(),
                allocation.getTeam(student).getProject().getName());
        String subject = messages.at("email.subjectResults");
        this.sendEmail(subject, student.getEmailAddress(),
                bodyText);
    }

    /**
     * Verschickt eine E-Mail an einen Betreuer und benachrichtigt ihn über die
     * finale Einteilung.
     * 
     * @param allocation
     *            Die finale Einteilung.
     * @param adviser
     *            Der zu benachrichtigegnde Betreuer.
     * @throws EmailException
     */
    public void notifyAdviser(Allocation allocation, Adviser adviser)
            throws EmailException {
        String teamsList = "";
        List<Team> advisersTeams = allocation.getTeamsByAdviser(adviser);
        for (int i = 0; i < advisersTeams.size(); i++) {
            teamsList += advisersTeams.get(i).toStringForNotification() + "\n";
        }
        String bodyText = messages.at("email.notifyResultsAdviser",
                adviser.getName(), teamsList);
        String subject = messages.at("email.subjectResults");
        this.sendEmail(subject, adviser.getEmailAddress(),
                bodyText);
    }

    public void sendAdviserPassword(Adviser adviser, String password)
            throws EmailException {
        String bodyText = messages.at("email.adviserPassword",
                adviser.getName(), password);
        String subject = messages.at("email.subjectAdviserPassword");
        this.sendEmail(subject, adviser.getEmailAddress(),
                bodyText);
    }

    public void sendVerifyNewPassowrd(User user, String verificationURL)
            throws EmailException {
        String bodyText = messages.at("email.verifyNewPassword",
                user.getName(), verificationURL);
        String subject = messages.at("email.subjectVerifyNewPassword");
        this.sendEmail(subject, user.getEmailAddress(), bodyText);
    }

    /**
     * Verschickt eine email zur Verifikation der email-Adresse an einen
     * Studenten.
     * 
     * @param student
     *            Student, der die email erhält
     * @param verificationURL
     *            Die URL, die auf die verificationPage geroutet wird.
     * @throws EmailException
     */
    public void sendVerificationMail(Student student, String verificationURL)
            throws EmailException {
        String bodyText = messages.at("email.studentVerify",
                student.getName(), verificationURL);
        String subject = messages.at("email.subjectStudentVerify");
        this.sendEmail(subject, student.getEmailAddress(), bodyText);
    }

    private void sendEmail(String subject, String mailTo,
            String bodyText) throws EmailException {
        SMTPOptions options = SMTPOptions.getInstance();
        Email email = new SimpleEmail();
        email.setHostName(options.getHost());
        email.setSmtpPort(options.getPort());
        email.setAuthentication(options.getUsername(), options.getPassword());
        email.setSSL(options.getSsl());
        email.setTLS(options.getTls());
        email.setSocketTimeout(options.getTimeout());
        email.setSocketConnectionTimeout(options.getConnectionTimeout());
        email.setDebug(options.getDebug());
        email.setSubject(subject);
        email.setFrom(options.getMailFrom());
        email.addTo(mailTo);
        email.setMsg(bodyText);
        email.send();

    }
}
