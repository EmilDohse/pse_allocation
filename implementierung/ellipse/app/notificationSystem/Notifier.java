// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package notificationSystem;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import data.Adviser;
import data.Allocation;
import data.GeneralData;
import data.Student;
import data.Team;
import play.Configuration;
import play.libs.mailer.*;
import play.mvc.Http.Context;

/************************************************************/
/**
 * Klasse die alle Benachrichtigungen der Benutzer (Studenten und Betreuer) per
 * E-Mail übernimmt.
 * 
 * TODO: Absenederadresse überall finalisieren.
 */
public class Notifier {

    @Inject
    MailerClient          mailer;

    private final Context ctx;

    /**
     * Konstruktor Methode.
     */
    public Notifier(Context ctx) {
        this.ctx = ctx;
    }

    /**
     * Verschickt an alle Benutzer (Betreuer und Studenten) eine E-Mail mit
     * ihrem zugeteilten Team/Projekt.
     * 
     * @param allocation
     *            veröffentlichte Einteilung
     */
    public void notifyAllUsers(Allocation allocation) {
        List<Adviser> advisers = GeneralData.loadInstance().getCurrentSemester().getAdvisers();
        List<Student> students = GeneralData.loadInstance().getCurrentSemester().getStudents();

        advisers.forEach((adviser) -> notifyAdviser(allocation, adviser));
        students.forEach((student) -> notifyStudent(allocation, student));
    }

    /**
     * Verschickt eine E-Mail an einen Studenten und benachrichtigt ihn über die
     * finale Einteilung.
     * 
     * @param allocation
     *            Die finale Einteilung
     * @param student
     *            Der zu benachrichtigende Student
     */
    public void notifyStudent(Allocation allocation, Student student) {
        String bodyText = ctx.messages().at("email.notifyResultsStudent", student.getName(),
                allocation.getTeam(student).getProject().getName());
        String subject = ctx.messages().at("email.subjectResults");
        this.sendEmail(subject, "TODO", student.getEmailAddress(), bodyText);
    }

    /**
     * Verschickt eine E-Mail an einen Betreuer und benachrichtigt ihn über die
     * finale Einteilung.
     * 
     * @param allocation
     *            Die finale Einteilung.
     * @param adviser
     *            Der zu benachrichtigegnde Betreuer.
     */
    public void notifyAdviser(Allocation allocation, Adviser adviser) {
        String teamsList = "";
        List<Team> advisersTeams = allocation.getTeamsByAdviser(adviser);
        for (int i = 0; i < advisersTeams.size(); i++) {
            teamsList += advisersTeams.get(i).toStringForNotification() + "\n";
        }
        String bodyText = ctx.messages().at("email.notifyResultsAdviser", adviser.getName(), teamsList);
        String subject = ctx.messages().at("email.subjectResults");
        this.sendEmail(subject, "TODO", adviser.getEmailAddress(), bodyText);
    }

    public void sendAdviserPassword(Adviser adviser, String password) {
        String bodyText = ctx.messages().at("email.adviserPassword", adviser.getName(), password);
        String subject = ctx.messages().at("email.subjectAdviserPassword");
        this.sendEmail(subject, "TODO", adviser.getEmailAddress(), bodyText);
    }

    /**
     * Verschickt eine email zur Verifikation der email-Adresse an einen
     * Studenten.
     * 
     * @param student
     *            Student, der die email erhält
     */
    public void sendVerificationMail(Student student) {
    }

    private void sendEmail(String subject, String mailFrom, String mailTo, String bodyText) {
        Email email = new Email().setSubject(subject);
        email.setFrom(mailFrom);
        email.addTo(mailTo);
        email.setBodyText(bodyText);
        mailer.send(email);
    }
}
